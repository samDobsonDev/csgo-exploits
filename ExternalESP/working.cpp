#include <iostream>
#include <Windows.h>
#include <TlHelp32.h>

#define m_vecOrigin 0x138
#define dwViewMatrix 0x4D94854
#define m_iHealth 0x100
#define dwEntityList 0x4DA2F54
#define m_iTeamNum 0xF4

#define EnemyPen (RGB(255,0,0)) //red pen
#define FriendlyPen (RGB(0,255,0)) //green pen

DWORD GetProcessID(const char* processName) //sets GetProcesID function, takes "csgo.exe" as a parameter
{
    PROCESSENTRY32 processesArray{ 0 }; //creates array
    processesArray.dwSize - sizeof(processesArray); //sets size of structure

    HANDLE findProcessID = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //creates snapshot of all current processes ...
    BOOL processEnum = Process32First(findProcessID, &processesArray); //gets first result and places it in the array
    while (processEnum)
    {
        if (strcmp(processName, processesArray.szExeFile) == 0) //if processName and the current process being enumerated have the same name...
        {
            DWORD processID = processesArray.th32ProcessID; //set new variable processID to the ID of the current process being enumerated
            break;
        }
        processEnum = Process32Next(findProcessID, &processesArray); //gets next result and places it in the array
    }

    CloseHandle(findProcessID); //closes handle
}

uintptr_t GetModuleBaseAddress(DWORD processID, const char* moduleName) //gets module base address for client.dll
{
    MODULEENTRY32 modulesArray{ 0 };
    modulesArray.dwSize = sizeof(modulesArray);

    HANDLE findModuleAddress = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE32, processID); //creates snapshot of all running 32-bit modules in the specified process
    BOOL moduleEnum = Module32First(findModuleAddress, &modulesArray); //gets first result and places it in the array
    while (moduleEnum)
    {
        if (strcmp(moduleName, modulesArray.szModule) == 0) //if moduleName and the current module being enumerated match...
        {
            BYTE * modBaseAddress = modulesArray.modBaseAddr; //set new variable modBaseAddress to the address of the current module
            break;
        }
        moduleEnum = Module32Next(findModuleAddress, &modulesArray); //otherwise go to next module and check again
    }
}

int main()
{
    uintptr_t moduleBaseAddress = GetModuleBaseAddress(GetProcessID("csgo.exe"), "client.dll"); //calls to GetModuleBaseAddress function, which takes the Process ID and the module name as a variable

    HBRUSH EnemyBrush = CreateSolidBrush(RGB(255, 0, 0)); //creates new red brush and gets a handle to the brush, stored in EnemyBrush variable

    int screenX = GetSystemMetrics(SM_CXSCREEN);  //gets screen width in pixels
    int screenY = GetSystemMetrics(SM_CYSCREEN); //gets screen height in pixels
}