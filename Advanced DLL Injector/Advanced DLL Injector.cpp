#include <Windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <string>

int main()
{
    const char* dllPath = "D:\\Code\\csgo-exploits\\hello-world-x64.dll";
    const char* processName = "notepad.exe";
    DWORD processID = 0;
    
    PROCESSENTRY32 processArray{ 0 }; //creates array
    processArray.dwSize = sizeof(processArray); //sets size of structure
    
    HANDLE findProcessID = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); //creates snapshot of all current processes ...
    BOOL processEnum = Process32First(findProcessID, &processArray); //gets first result and places it in the array
    while (processEnum)
    {
        if (!strcmp(processName, processArray.szExeFile)) //if processName and the current process being enumerated are the same...
        {
            processID = processArray.th32ProcessID; //set processID to the ID of the current process being enumerated
            break;
        }
        processEnum = Process32Next(findProcessID, &processArray); //gets next result and places it in the array
    }

    CloseHandle(findProcessID);

    std::cout << "The process ID is: " << (processID);

    HANDLE processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, processID);
    if (!processHandle)
    {
        std::cout << "OpenProcess() failed: " << GetLastError() << std::endl;
        return false;
    }

    void * memoryAddress = VirtualAllocEx(processHandle, NULL, strlen(dllPath) + 1, MEM_COMMIT, PAGE_READWRITE);
    if (!memoryAddress)
    {
        std::cout << "Required memory could not be allocated: " << GetLastError() << std::endl;
        return false;
    }

    bool memoryWrite = WriteProcessMemory(processHandle, memoryAddress, dllPath, strlen(dllPath) + 1, NULL);
    if (!memoryWrite)
    {
        std::cout << "Memory could not be written: " << GetLastError() << std::endl;
        return false;
    }

    HANDLE memoryWriteHandle = CreateRemoteThread(processHandle, NULL, NULL, (LPTHREAD_START_ROUTINE)LoadLibraryA, memoryAddress, NULL, NULL);

    CloseHandle(memoryWriteHandle);
    CloseHandle(processHandle);

    std::cout << "\nInjection successful!";
    return 0;
}